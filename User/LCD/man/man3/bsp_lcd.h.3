.TH "E:/STM32文件/练习/LTDC_DMA2D_2023_12_5/HAL_F429/User/LCD/bsp_lcd.h" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
E:/STM32文件/练习/LTDC_DMA2D_2023_12_5/HAL_F429/User/LCD/bsp_lcd.h
.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx\&.h'\fP
.br
\fC#include 'fonts\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBLCD_DrawPropTypeDef\fP"
.br
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBLTDC_R0_GPIO_PORT\fP   GPIOH"
.br
.ti -1c
.RI "#define \fBLTDC_R0_GPIO_Pin\fP   GPIO_PIN_2"
.br
.ti -1c
.RI "#define \fBLTDC_R1_GPIO_PORT\fP   GPIOH"
.br
.ti -1c
.RI "#define \fBLTDC_R1_GPIO_Pin\fP   GPIO_PIN_3"
.br
.ti -1c
.RI "#define \fBLTDC_R2_GPIO_PORT\fP   GPIOH"
.br
.ti -1c
.RI "#define \fBLTDC_R2_GPIO_Pin\fP   GPIO_PIN_8"
.br
.ti -1c
.RI "#define \fBLTDC_R3_GPIO_PORT\fP   GPIOB"
.br
.ti -1c
.RI "#define \fBLTDC_R3_GPIO_Pin\fP   GPIO_PIN_0"
.br
.ti -1c
.RI "#define \fBLTDC_R4_GPIO_PORT\fP   GPIOA"
.br
.ti -1c
.RI "#define \fBLTDC_R4_GPIO_Pin\fP   GPIO_PIN_11"
.br
.ti -1c
.RI "#define \fBLTDC_R5_GPIO_PORT\fP   GPIOA"
.br
.ti -1c
.RI "#define \fBLTDC_R5_GPIO_Pin\fP   GPIO_PIN_12"
.br
.ti -1c
.RI "#define \fBLTDC_R6_GPIO_PORT\fP   GPIOB"
.br
.ti -1c
.RI "#define \fBLTDC_R6_GPIO_Pin\fP   GPIO_PIN_1"
.br
.ti -1c
.RI "#define \fBLTDC_R7_GPIO_PORT\fP   GPIOG"
.br
.ti -1c
.RI "#define \fBLTDC_R7_GPIO_Pin\fP   GPIO_PIN_6"
.br
.ti -1c
.RI "#define \fBLTDC_G0_GPIO_PORT\fP   GPIOE"
.br
.ti -1c
.RI "#define \fBLTDC_G0_GPIO_Pin\fP   GPIO_PIN_5"
.br
.ti -1c
.RI "#define \fBLTDC_G1_GPIO_PORT\fP   GPIOE"
.br
.ti -1c
.RI "#define \fBLTDC_G1_GPIO_Pin\fP   GPIO_PIN_6"
.br
.ti -1c
.RI "#define \fBLTDC_G2_GPIO_PORT\fP   GPIOH"
.br
.ti -1c
.RI "#define \fBLTDC_G2_GPIO_Pin\fP   GPIO_PIN_13"
.br
.ti -1c
.RI "#define \fBLTDC_G3_GPIO_PORT\fP   GPIOG"
.br
.ti -1c
.RI "#define \fBLTDC_G3_GPIO_Pin\fP   GPIO_PIN_10"
.br
.ti -1c
.RI "#define \fBLTDC_G4_GPIO_PORT\fP   GPIOH"
.br
.ti -1c
.RI "#define \fBLTDC_G4_GPIO_Pin\fP   GPIO_PIN_15"
.br
.ti -1c
.RI "#define \fBLTDC_G5_GPIO_PORT\fP   GPIOI"
.br
.ti -1c
.RI "#define \fBLTDC_G5_GPIO_Pin\fP   GPIO_PIN_0"
.br
.ti -1c
.RI "#define \fBLTDC_G6_GPIO_PORT\fP   GPIOC"
.br
.ti -1c
.RI "#define \fBLTDC_G6_GPIO_Pin\fP   GPIO_PIN_7"
.br
.ti -1c
.RI "#define \fBLTDC_G7_GPIO_PORT\fP   GPIOI"
.br
.ti -1c
.RI "#define \fBLTDC_G7_GPIO_Pin\fP   GPIO_PIN_2"
.br
.ti -1c
.RI "#define \fBLTDC_B0_GPIO_PORT\fP   GPIOE"
.br
.ti -1c
.RI "#define \fBLTDC_B0_GPIO_Pin\fP   GPIO_PIN_4"
.br
.ti -1c
.RI "#define \fBLTDC_B1_GPIO_PORT\fP   GPIOG"
.br
.ti -1c
.RI "#define \fBLTDC_B1_GPIO_Pin\fP   GPIO_PIN_12"
.br
.ti -1c
.RI "#define \fBLTDC_B2_GPIO_PORT\fP   GPIOD"
.br
.ti -1c
.RI "#define \fBLTDC_B2_GPIO_Pin\fP   GPIO_PIN_6"
.br
.ti -1c
.RI "#define \fBLTDC_B3_GPIO_PORT\fP   GPIOG"
.br
.ti -1c
.RI "#define \fBLTDC_B3_GPIO_Pin\fP   GPIO_PIN_11"
.br
.ti -1c
.RI "#define \fBLTDC_B4_GPIO_PORT\fP   GPIOI"
.br
.ti -1c
.RI "#define \fBLTDC_B4_GPIO_Pin\fP   GPIO_PIN_4"
.br
.ti -1c
.RI "#define \fBLTDC_B5_GPIO_PORT\fP   GPIOA"
.br
.ti -1c
.RI "#define \fBLTDC_B5_GPIO_Pin\fP   GPIO_PIN_3"
.br
.ti -1c
.RI "#define \fBLTDC_B6_GPIO_PORT\fP   GPIOB"
.br
.ti -1c
.RI "#define \fBLTDC_B6_GPIO_Pin\fP   GPIO_PIN_8"
.br
.ti -1c
.RI "#define \fBLTDC_B7_GPIO_PORT\fP   GPIOB"
.br
.ti -1c
.RI "#define \fBLTDC_B7_GPIO_Pin\fP   GPIO_PIN_9"
.br
.ti -1c
.RI "#define \fBLTDC_CLK_GPIO_PORT\fP   GPIOG"
.br
.ti -1c
.RI "#define \fBLTDC_CLK_GPIO_Pin\fP   GPIO_PIN_7"
.br
.ti -1c
.RI "#define \fBLTDC_HSYNC_GPIO_PORT\fP   GPIOI"
.br
.ti -1c
.RI "#define \fBLTDC_HSYNC_GPIO_Pin\fP   GPIO_PIN_10"
.br
.ti -1c
.RI "#define \fBLTDC_VSYNC_GPIO_PORT\fP   GPIOI"
.br
.ti -1c
.RI "#define \fBLTDC_VSYNC_GPIO_Pin\fP   GPIO_PIN_9"
.br
.ti -1c
.RI "#define \fBLTDC_DE_GPIO_PORT\fP   GPIOF"
.br
.ti -1c
.RI "#define \fBLTDC_DE_GPIO_Pin\fP   GPIO_PIN_10"
.br
.ti -1c
.RI "#define \fBLTDC_DISP_GPIO_PORT\fP   GPIOD"
.br
.ti -1c
.RI "#define \fBLTDC_DISP_GPIO_Pin\fP   GPIO_PIN_4"
.br
.ti -1c
.RI "#define \fBLTDC_BL_GPIO_PORT\fP   GPIOD"
.br
.ti -1c
.RI "#define \fBLTDC_BL_GPIO_Pin\fP   GPIO_PIN_7"
.br
.ti -1c
.RI "#define \fBLTDC_GPIO_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_BLUE\fP   ((uint32_t)0xFF0000FF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_GREEN\fP   ((uint32_t)0xFF00FF00)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_RED\fP   ((uint32_t)0xFFFF0000)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_CYAN\fP   ((uint32_t)0xFF00FFFF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_MAGENTA\fP   ((uint32_t)0xFFFF00FF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_YELLOW\fP   ((uint32_t)0xFFFFFF00)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTBLUE\fP   ((uint32_t)0xFF8080FF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTGREEN\fP   ((uint32_t)0xFF80FF80)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTRED\fP   ((uint32_t)0xFFFF8080)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTCYAN\fP   ((uint32_t)0xFF80FFFF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTMAGENTA\fP   ((uint32_t)0xFFFF80FF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTYELLOW\fP   ((uint32_t)0xFFFFFF80)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKBLUE\fP   ((uint32_t)0xFF000080)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKGREEN\fP   ((uint32_t)0xFF008000)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKRED\fP   ((uint32_t)0xFF800000)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKCYAN\fP   ((uint32_t)0xFF008080)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKMAGENTA\fP   ((uint32_t)0xFF800080)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKYELLOW\fP   ((uint32_t)0xFF808000)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_WHITE\fP   ((uint32_t)0xFFFFFFFF)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_LIGHTGRAY\fP   ((uint32_t)0xFFD3D3D3)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_GRAY\fP   ((uint32_t)0xFF808080)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_DARKGRAY\fP   ((uint32_t)0xFF404040)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_BLACK\fP   ((uint32_t)0xFF000000)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_BROWN\fP   ((uint32_t)0xFFA52A2A)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_ORANGE\fP   ((uint32_t)0xFFFFA500)"
.br
.ti -1c
.RI "#define \fBLCD_COLOR_TRANSPARENT\fP   ((uint32_t)0xFF000000)"
.br
.ti -1c
.RI "#define \fBLCD_DEFAULT_FONT\fP   Font24"
.br
.ti -1c
.RI "#define \fBLCD_PIXEL_WIDTH\fP   (uint16_t)800"
.br
.ti -1c
.RI "#define \fBLCD_PIXEL_HEIGHT\fP   (uint16_t)480"
.br
.ti -1c
.RI "#define \fBHBP\fP   46"
.br
.ti -1c
.RI "#define \fBVBP\fP   23"
.br
.ti -1c
.RI "#define \fBHSW\fP   1"
.br
.ti -1c
.RI "#define \fBVSW\fP   1"
.br
.ti -1c
.RI "#define \fBHFP\fP   22"
.br
.ti -1c
.RI "#define \fBVFP\fP   22"
.br
.ti -1c
.RI "#define \fBMAX_LAYER_NUMBER\fP   (uint32_t)2"
.br
.ti -1c
.RI "#define \fBLTDC_ACTIVE_LAYER\fP   (uint32_t)1"
.br
.ti -1c
.RI "#define \fBLCD_FB_START_ADDRESS\fP   (uint32_t)0xD0000000"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "void \fBLCD_DisplayOn\fP (void)"
.br
.ti -1c
.RI "void \fBLCD_DisplayOff\fP (void)"
.br
.ti -1c
.RI "void \fBLTDC_GPIO_Config\fP (void)"
.br
.ti -1c
.RI "void \fBLCD_CLK_Config\fP (void)"
.br
.RI "STM32与液晶屏通讯的时钟配置 时钟配置为9\&.6MHz "
.ti -1c
.RI "void \fBLTDC_Config\fP (void)"
.br
.ti -1c
.RI "uint32_t \fBLCD_GetXSize\fP (void)"
.br
.RI "获取LCD当前层X轴的大小 "
.ti -1c
.RI "uint32_t \fBLCD_GetYSize\fP (void)"
.br
.RI "获取LCD当前层Y轴的大小 "
.ti -1c
.RI "void \fBLCD_SetXSize\fP (uint32_t imageWidthPixels)"
.br
.RI "设置LCD当前层X轴的大小 "
.ti -1c
.RI "void \fBLCD_SetYSize\fP (uint32_t imageHeightPixels)"
.br
.RI "设置LCD当前层Y轴的大小 "
.ti -1c
.RI "void \fBLCD_LayerInit\fP (uint16_t LayerIndex, uint32_t FB_Address, uint32_t PixelFormat)"
.br
.RI "层级初始化 "
.ti -1c
.RI "void \fBLCD_Config\fP (void)"
.br
.ti -1c
.RI "void \fBLCD_SelectLayer\fP (uint32_t LayerIndex)"
.br
.RI "选择LCD的当前层 "
.ti -1c
.RI "void \fBLCD_SetLayerVisible\fP (uint32_t LayerIndex, FunctionalState State)"
.br
.RI "设置LCD层的可视化(即禁止或使能某一层) "
.ti -1c
.RI "void \fBLCD_SetTransparency\fP (uint32_t LayerIndex, uint8_t Transparency)"
.br
.RI "设置LCD的透明度常量，即Alpha "
.ti -1c
.RI "void \fBLCD_SetLayerAddress\fP (uint32_t LayerIndex, uint32_t Address)"
.br
.RI "设置LCD缓冲帧的首地址 "
.ti -1c
.RI "static void \fBLL_FillBuffer\fP (uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)"
.br
.ti -1c
.RI "void \fBLCD_DrawPixel\fP (uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)"
.br
.RI "绘制一个点 "
.ti -1c
.RI "void \fBLCD_DrawHLine\fP (uint16_t Xpos, uint16_t Ypos, uint16_t Length)"
.br
.RI "绘制一条水平直线 "
.ti -1c
.RI "void \fBLCD_DrawVLine\fP (uint16_t Xpos, uint16_t Ypos, uint16_t Length)"
.br
.RI "绘制一条垂直直线 "
.ti -1c
.RI "void \fBLCD_DrawAnyLine\fP (uint16_t X1pos, uint16_t Y1pos, uint16_t X2pos, uint16_t Y2pos)"
.br
.RI "绘制任意两点之间的一条直线 "
.ti -1c
.RI "void \fBLCD_FillRect\fP (uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)"
.br
.RI "填充一个实心矩形 "
.ti -1c
.RI "void \fBLCD_Clear\fP (uint32_t Color)"
.br
.RI "LCD当前层清屏 "
.ti -1c
.RI "void \fBLCD_ClearLine\fP (uint32_t Line)"
.br
.RI "清除一行 "
.ti -1c
.RI "uint32_t \fBLCD_ReadPixel\fP (uint16_t Xpos, uint16_t Ypos)"
.br
.RI "读取LCD的像素值 "
.ti -1c
.RI "void \fBLCD_SetTextColor\fP (uint32_t Color)"
.br
.RI "设置LCD当前层的文字颜色 "
.ti -1c
.RI "void \fBLCD_SetBackColor\fP (uint32_t Color)"
.br
.RI "设置LCD当前层的文字背景颜色 "
.ti -1c
.RI "void \fBLCD_SetColors\fP (uint32_t TextColor, uint32_t BackColor)"
.br
.RI "设置LCD当前层的文字颜色和文字背景颜色 "
.ti -1c
.RI "void \fBLCD_SetFont\fP (sFONT *fonts)"
.br
.RI "设置LCD当前层显示的字体 "
.ti -1c
.RI "sFONT * \fBLCD_GetFont\fP (void)"
.br
.RI "获取LCD当前层显示的字体 "
.ti -1c
.RI "void \fBLCD_SetLayerWindow\fP (uint16_t LayerIndex, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)"
.br
.RI "设置显示窗口 "
.ti -1c
.RI "static uint32_t \fBLCD_GetStartAddress\fP (uint16_t Xpos, uint16_t Ypos)"
.br
.ti -1c
.RI "static void \fBLCD_DrawChar\fP (uint16_t Xpos, uint16_t Ypos, const uint8_t *c)"
.br
.ti -1c
.RI "void \fBLCD_DisplayChar\fP (uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)"
.br
.RI "在指定位置显示一个字符(英文) "
.ti -1c
.RI "void \fBLCD_DisplayStringAt\fP (uint16_t Xpos, uint16_t Ypos, uint8_t *Text)"
.br
.RI "在指定位置显示一个字符串(英文) "
.ti -1c
.RI "void \fBLCD_DisplayStringLine\fP (uint8_t Line, uint8_t *Text)"
.br
.RI "在指定行显示一个字符串(英文) "
.ti -1c
.RI "int \fBGetGB2312Code_from_EXFlash\fP (uint8_t *pBuffer, uint16_t c)"
.br
.RI "获取一个中文GB2312编码字符的字模数据 "
.ti -1c
.RI "void \fBLCD_DisplayChar_CH\fP (uint16_t Xpos, uint16_t Ypos, uint16_t char_CH)"
.br
.RI "绘制一个中文字符 "
.ti -1c
.RI "void \fBLCD_DisplayStringLine_EN_CH\fP (uint16_t Line, uint8_t *Text)"
.br
.RI "显示一句可以包含中英文的句子 "
.in -1c
.SH "宏定义说明"
.PP 
.SS "#define HBP   46"

.SS "#define HFP   22"

.SS "#define HSW   1"

.SS "#define LCD_COLOR_BLACK   ((uint32_t)0xFF000000)"

.SS "#define LCD_COLOR_BLUE   ((uint32_t)0xFF0000FF)"

.SS "#define LCD_COLOR_BROWN   ((uint32_t)0xFFA52A2A)"

.SS "#define LCD_COLOR_CYAN   ((uint32_t)0xFF00FFFF)"

.SS "#define LCD_COLOR_DARKBLUE   ((uint32_t)0xFF000080)"

.SS "#define LCD_COLOR_DARKCYAN   ((uint32_t)0xFF008080)"

.SS "#define LCD_COLOR_DARKGRAY   ((uint32_t)0xFF404040)"

.SS "#define LCD_COLOR_DARKGREEN   ((uint32_t)0xFF008000)"

.SS "#define LCD_COLOR_DARKMAGENTA   ((uint32_t)0xFF800080)"

.SS "#define LCD_COLOR_DARKRED   ((uint32_t)0xFF800000)"

.SS "#define LCD_COLOR_DARKYELLOW   ((uint32_t)0xFF808000)"

.SS "#define LCD_COLOR_GRAY   ((uint32_t)0xFF808080)"

.SS "#define LCD_COLOR_GREEN   ((uint32_t)0xFF00FF00)"

.SS "#define LCD_COLOR_LIGHTBLUE   ((uint32_t)0xFF8080FF)"

.SS "#define LCD_COLOR_LIGHTCYAN   ((uint32_t)0xFF80FFFF)"

.SS "#define LCD_COLOR_LIGHTGRAY   ((uint32_t)0xFFD3D3D3)"

.SS "#define LCD_COLOR_LIGHTGREEN   ((uint32_t)0xFF80FF80)"

.SS "#define LCD_COLOR_LIGHTMAGENTA   ((uint32_t)0xFFFF80FF)"

.SS "#define LCD_COLOR_LIGHTRED   ((uint32_t)0xFFFF8080)"

.SS "#define LCD_COLOR_LIGHTYELLOW   ((uint32_t)0xFFFFFF80)"

.SS "#define LCD_COLOR_MAGENTA   ((uint32_t)0xFFFF00FF)"

.SS "#define LCD_COLOR_ORANGE   ((uint32_t)0xFFFFA500)"

.SS "#define LCD_COLOR_RED   ((uint32_t)0xFFFF0000)"

.SS "#define LCD_COLOR_TRANSPARENT   ((uint32_t)0xFF000000)"

.SS "#define LCD_COLOR_WHITE   ((uint32_t)0xFFFFFFFF)"

.SS "#define LCD_COLOR_YELLOW   ((uint32_t)0xFFFFFF00)"

.SS "#define LCD_DEFAULT_FONT   Font24"

.SS "#define LCD_FB_START_ADDRESS   (uint32_t)0xD0000000"

.SS "#define LCD_PIXEL_HEIGHT   (uint16_t)480"

.SS "#define LCD_PIXEL_WIDTH   (uint16_t)800"

.SS "#define LTDC_ACTIVE_LAYER   (uint32_t)1"

.SS "#define LTDC_B0_GPIO_Pin   GPIO_PIN_4"

.SS "#define LTDC_B0_GPIO_PORT   GPIOE"

.SS "#define LTDC_B1_GPIO_Pin   GPIO_PIN_12"

.SS "#define LTDC_B1_GPIO_PORT   GPIOG"

.SS "#define LTDC_B2_GPIO_Pin   GPIO_PIN_6"

.SS "#define LTDC_B2_GPIO_PORT   GPIOD"

.SS "#define LTDC_B3_GPIO_Pin   GPIO_PIN_11"

.SS "#define LTDC_B3_GPIO_PORT   GPIOG"

.SS "#define LTDC_B4_GPIO_Pin   GPIO_PIN_4"

.SS "#define LTDC_B4_GPIO_PORT   GPIOI"

.SS "#define LTDC_B5_GPIO_Pin   GPIO_PIN_3"

.SS "#define LTDC_B5_GPIO_PORT   GPIOA"

.SS "#define LTDC_B6_GPIO_Pin   GPIO_PIN_8"

.SS "#define LTDC_B6_GPIO_PORT   GPIOB"

.SS "#define LTDC_B7_GPIO_Pin   GPIO_PIN_9"

.SS "#define LTDC_B7_GPIO_PORT   GPIOB"

.SS "#define LTDC_BL_GPIO_Pin   GPIO_PIN_7"

.SS "#define LTDC_BL_GPIO_PORT   GPIOD"

.SS "#define LTDC_CLK_GPIO_Pin   GPIO_PIN_7"

.SS "#define LTDC_CLK_GPIO_PORT   GPIOG"

.SS "#define LTDC_DE_GPIO_Pin   GPIO_PIN_10"

.SS "#define LTDC_DE_GPIO_PORT   GPIOF"

.SS "#define LTDC_DISP_GPIO_Pin   GPIO_PIN_4"

.SS "#define LTDC_DISP_GPIO_PORT   GPIOD"

.SS "#define LTDC_G0_GPIO_Pin   GPIO_PIN_5"

.SS "#define LTDC_G0_GPIO_PORT   GPIOE"

.SS "#define LTDC_G1_GPIO_Pin   GPIO_PIN_6"

.SS "#define LTDC_G1_GPIO_PORT   GPIOE"

.SS "#define LTDC_G2_GPIO_Pin   GPIO_PIN_13"

.SS "#define LTDC_G2_GPIO_PORT   GPIOH"

.SS "#define LTDC_G3_GPIO_Pin   GPIO_PIN_10"

.SS "#define LTDC_G3_GPIO_PORT   GPIOG"

.SS "#define LTDC_G4_GPIO_Pin   GPIO_PIN_15"

.SS "#define LTDC_G4_GPIO_PORT   GPIOH"

.SS "#define LTDC_G5_GPIO_Pin   GPIO_PIN_0"

.SS "#define LTDC_G5_GPIO_PORT   GPIOI"

.SS "#define LTDC_G6_GPIO_Pin   GPIO_PIN_7"

.SS "#define LTDC_G6_GPIO_PORT   GPIOC"

.SS "#define LTDC_G7_GPIO_Pin   GPIO_PIN_2"

.SS "#define LTDC_G7_GPIO_PORT   GPIOI"

.SS "#define LTDC_GPIO_CLK_ENABLE()"
\fB值:\fP.PP
.nf
                                 {__GPIOA_CLK_ENABLE();__GPIOB_CLK_ENABLE();__GPIOC_CLK_ENABLE();__GPIOD_CLK_ENABLE();__GPIOE_CLK_ENABLE();\\
                                 __GPIOF_CLK_ENABLE();__GPIOG_CLK_ENABLE();__GPIOH_CLK_ENABLE();}
.fi

.SS "#define LTDC_HSYNC_GPIO_Pin   GPIO_PIN_10"

.SS "#define LTDC_HSYNC_GPIO_PORT   GPIOI"

.SS "#define LTDC_R0_GPIO_Pin   GPIO_PIN_2"

.SS "#define LTDC_R0_GPIO_PORT   GPIOH"

.SS "#define LTDC_R1_GPIO_Pin   GPIO_PIN_3"

.SS "#define LTDC_R1_GPIO_PORT   GPIOH"

.SS "#define LTDC_R2_GPIO_Pin   GPIO_PIN_8"

.SS "#define LTDC_R2_GPIO_PORT   GPIOH"

.SS "#define LTDC_R3_GPIO_Pin   GPIO_PIN_0"

.SS "#define LTDC_R3_GPIO_PORT   GPIOB"

.SS "#define LTDC_R4_GPIO_Pin   GPIO_PIN_11"

.SS "#define LTDC_R4_GPIO_PORT   GPIOA"

.SS "#define LTDC_R5_GPIO_Pin   GPIO_PIN_12"

.SS "#define LTDC_R5_GPIO_PORT   GPIOA"

.SS "#define LTDC_R6_GPIO_Pin   GPIO_PIN_1"

.SS "#define LTDC_R6_GPIO_PORT   GPIOB"

.SS "#define LTDC_R7_GPIO_Pin   GPIO_PIN_6"

.SS "#define LTDC_R7_GPIO_PORT   GPIOG"

.SS "#define LTDC_VSYNC_GPIO_Pin   GPIO_PIN_9"

.SS "#define LTDC_VSYNC_GPIO_PORT   GPIOI"

.SS "#define MAX_LAYER_NUMBER   (uint32_t)2"

.SS "#define VBP   23"

.SS "#define VFP   22"

.SS "#define VSW   1"

.SH "函数说明"
.PP 
.SS "int GetGB2312Code_from_EXFlash (uint8_t * pBuffer, uint16_t c)"

.PP
获取一个中文GB2312编码字符的字模数据 
.PP
\fB参数\fP
.RS 4
\fIpBuffer\fP 用于存放字模数据的缓冲区 
.br
\fIc\fP GB2312编码字符 
.RE
.PP
\fB返回\fP
.RS 4
int 无意义 
.RE
.PP

.SS "void LCD_Clear (uint32_t Color)"

.PP
LCD当前层清屏 
.PP
\fB参数\fP
.RS 4
\fIColor\fP 用于填充的背景颜色 
.RE
.PP

.SS "void LCD_ClearLine (uint32_t Line)"

.PP
清除一行 
.PP
\fB参数\fP
.RS 4
\fILine\fP 要清除的行 
.RE
.PP

.SS "void LCD_CLK_Config (void)"

.PP
STM32与液晶屏通讯的时钟配置 时钟配置为9\&.6MHz 
.SS "void LCD_Config (void)"

.SS "void LCD_DisplayChar (uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)"

.PP
在指定位置显示一个字符(英文) 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP 显示的X坐标 
.br
\fIYpos\fP 显示的Y坐标 
.br
\fIAscii\fP 需要显示的字符 
.RE
.PP

.SS "void LCD_DisplayChar_CH (uint16_t Xpos, uint16_t Ypos, uint16_t char_CH)"

.PP
绘制一个中文字符 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP 绘制字符的X坐标 
.br
\fIYpos\fP 绘制字符的Y坐标 
.br
\fIchar_CH\fP 中文字符 
.RE
.PP

.SS "void LCD_DisplayOff (void)"

.SS "void LCD_DisplayOn (void)"

.SS "void LCD_DisplayStringAt (uint16_t Xpos, uint16_t Ypos, uint8_t * Text)"

.PP
在指定位置显示一个字符串(英文) 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP 显示的起始位置X坐标 
.br
\fIYpos\fP 显示的起始位置Y坐标 
.br
\fIText\fP 指向字符串的指针 
.RE
.PP

.SS "void LCD_DisplayStringLine (uint8_t Line, uint8_t * Text)"

.PP
在指定行显示一个字符串(英文) 
.PP
\fB参数\fP
.RS 4
\fILine\fP 显示的起始行(超出行宽会自动换行) 
.br
\fIText\fP 指向字符串的指针 
.RE
.PP

.SS "void LCD_DisplayStringLine_EN_CH (uint16_t Line, uint8_t * Text)"

.PP
显示一句可以包含中英文的句子 
.PP
\fB参数\fP
.RS 4
\fILine\fP 显示的起始行(超出行宽会自动换行) 
.br
\fIText\fP 指向需要显示的句子的指针 
.RE
.PP

.SS "void LCD_DrawAnyLine (uint16_t X1pos, uint16_t Y1pos, uint16_t X2pos, uint16_t Y2pos)"

.PP
绘制任意两点之间的一条直线 
.PP
\fB参数\fP
.RS 4
\fIX1pos\fP 点1的X坐标 
.br
\fIY1pos\fP 点1的Y坐标 
.br
\fIX2pos\fP 点2的X坐标 
.br
\fIY2pos\fP 点2的Y坐标 
.RE
.PP

.SS "static void LCD_DrawChar (uint16_t Xpos, uint16_t Ypos, const uint8_t * c)\fC [static]\fP"

.SS "void LCD_DrawHLine (uint16_t Xpos, uint16_t Ypos, uint16_t Length)"

.PP
绘制一条水平直线 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP X轴起始坐标 
.br
\fIYpos\fP Y轴起始坐标 
.br
\fILength\fP 线的长度 
.RE
.PP

.SS "void LCD_DrawPixel (uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)"

.PP
绘制一个点 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP X轴坐标 
.br
\fIYpos\fP Y轴坐标 
.br
\fIRGB_Code\fP 像素颜色值 
.RE
.PP

.SS "void LCD_DrawVLine (uint16_t Xpos, uint16_t Ypos, uint16_t Length)"

.PP
绘制一条垂直直线 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP X轴起始坐标 
.br
\fIYpos\fP Y轴起始坐标 
.br
\fILength\fP 线的长度 
.RE
.PP

.SS "void LCD_FillRect (uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)"

.PP
填充一个实心矩形 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP 矩形起始位置的X坐标 
.br
\fIYpos\fP 矩形起始位置的Y坐标 
.br
\fIWidth\fP 矩形宽度 
.br
\fIHeight\fP 矩形高度 
.RE
.PP

.SS "sFONT * LCD_GetFont (void)"

.PP
获取LCD当前层显示的字体 
.PP
\fB返回\fP
.RS 4
sFONT* LCD当前层的字体类型 
.RE
.PP

.SS "static uint32_t LCD_GetStartAddress (uint16_t Xpos, uint16_t Ypos)\fC [static]\fP"

.SS "uint32_t LCD_GetXSize (void)"

.PP
获取LCD当前层X轴的大小 
.PP
\fB返回\fP
.RS 4
uint32_t X轴的大小 
.RE
.PP

.SS "uint32_t LCD_GetYSize (void)"

.PP
获取LCD当前层Y轴的大小 
.PP
\fB返回\fP
.RS 4
uint32_t Y轴的大小 
.RE
.PP

.SS "void LCD_LayerInit (uint16_t LayerIndex, uint32_t FB_Address, uint32_t PixelFormat)"

.PP
层级初始化 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 要设置的层 
.br
\fIFB_Address\fP 该层的显存首地址 
.br
\fIPixelFormat\fP 该层的像素格式 
.RE
.PP

.SS "uint32_t LCD_ReadPixel (uint16_t Xpos, uint16_t Ypos)"

.PP
读取LCD的像素值 
.PP
\fB参数\fP
.RS 4
\fIXpos\fP 需要读取的像素点的X坐标 
.br
\fIYpos\fP 需要读取的像素点的Y坐标 
.RE
.PP
\fB返回\fP
.RS 4
uint32_t 指定像素点的像素值 
.RE
.PP

.SS "void LCD_SelectLayer (uint32_t LayerIndex)"

.PP
选择LCD的当前层 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 1：前景层 0：背景层 
.RE
.PP

.SS "void LCD_SetBackColor (uint32_t Color)"

.PP
设置LCD当前层的文字背景颜色 
.PP
\fB参数\fP
.RS 4
\fIColor\fP 文字背景颜色 
.RE
.PP

.SS "void LCD_SetColors (uint32_t TextColor, uint32_t BackColor)"

.PP
设置LCD当前层的文字颜色和文字背景颜色 
.PP
\fB参数\fP
.RS 4
\fITextColor\fP 文字颜色 
.br
\fIBackColor\fP 文字背景颜色 
.RE
.PP

.SS "void LCD_SetFont (sFONT * fonts)"

.PP
设置LCD当前层显示的字体 
.PP
\fB参数\fP
.RS 4
\fIfonts\fP 字体类型 
.RE
.PP

.SS "void LCD_SetLayerAddress (uint32_t LayerIndex, uint32_t Address)"

.PP
设置LCD缓冲帧的首地址 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 1：前景层 0：背景层 
.br
\fIAddress\fP LCD缓冲帧的首地址 
.RE
.PP

.SS "void LCD_SetLayerVisible (uint32_t LayerIndex, FunctionalState State)"

.PP
设置LCD层的可视化(即禁止或使能某一层) 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 1：前景层 0：背景层 
.br
\fIState\fP 禁止或使能 
.RE
.PP

.SS "void LCD_SetLayerWindow (uint16_t LayerIndex, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)"

.PP
设置显示窗口 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 
.br
\fIXpos\fP 窗口起始位置X坐标 
.br
\fIYpos\fP 窗口起始位置Y坐标 
.br
\fIWidth\fP 窗口宽度 
.br
\fIHeight\fP 窗口高度 
.RE
.PP

.SS "void LCD_SetTextColor (uint32_t Color)"

.PP
设置LCD当前层的文字颜色 
.PP
\fB参数\fP
.RS 4
\fIColor\fP 文字颜色 
.RE
.PP

.SS "void LCD_SetTransparency (uint32_t LayerIndex, uint8_t Transparency)"

.PP
设置LCD的透明度常量，即Alpha 
.PP
\fB参数\fP
.RS 4
\fILayerIndex\fP 1：前景层 0：背景层 
.br
\fITransparency\fP 透明度，范围(0-255)，0为完全透明 
.RE
.PP

.SS "void LCD_SetXSize (uint32_t imageWidthPixels)"

.PP
设置LCD当前层X轴的大小 
.PP
\fB参数\fP
.RS 4
\fIimageHeightPixels\fP 图像宽度像素个数 
.RE
.PP

.SS "void LCD_SetYSize (uint32_t imageHeightPixels)"

.PP
设置LCD当前层Y轴的大小 
.PP
\fB参数\fP
.RS 4
\fIimageHeightPixels\fP 图像高度像素个数 
.RE
.PP

.SS "static void LL_FillBuffer (uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)\fC [static]\fP"

.SS "void LTDC_Config (void)"

.SS "void LTDC_GPIO_Config (void)"

.SH "作者"
.PP 
由 Doyxgen 通过分析 My Project 的 源代码自动生成\&.
